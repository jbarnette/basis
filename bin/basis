#!/usr/bin/env ruby

require "basis"
require "basis/context"
require "basis/hooks"
require "basis/my"
require "basis/repo"
require "optparse"

@defines = {}
@options = OptionParser.new

@options.banner = <<-END
  Usage: basis [options] COMMAND [ARGS]

  Commands:
      add <git-url> [name]             Register a template locally
      list, ls [pattern]               List available templates
      remove, rm <name>                Remove a template
      rename, mv <old> <new>           Rename a template
      update [pattern]                 Update local templates

      # add the 'gem-hoe' template
      $ basis add git://github.com/jbarnette/basis-gem-hoe.git

      # start a new project `foo' using the `gem-hoe' template
      $ basis gem-hoe foo

  Switches:
END

@options.banner.gsub! /^  /, ""

def help
  puts @options.help
  exit
end

def help! message = nil
  if message
    message = "fatal: #{message}" if /^fatal/ !~ message
    warn message
  end

  abort @options.help
end

@options.on "-D KEY=VAL", "Define or override a config value" do |kv|
  /^([^=]+)(=(.*))?$/ =~ kv
  key, value = $1, $3 || true
  @defines[key] = value
end

@options.on "--help", "-h", "-?", "Show this help" do
  help
end

@options.on "--version", "-V", "Print #{Basis::VERSION}" do
  puts Basis::Version
  exit
end

begin
  @options.parse! ARGV
rescue OptionParser::ParseError => e
  help! e.message
end


if File.file?(hooks = File.expand_path("~/.basis/hooks.rb"))
  Basis::Hooks.module_eval File.read(hooks), hooks, 1
end

@repo = Basis::Repo.new

begin
  case command = ARGV.shift
  when "add" then
    url, name = ARGV
    help! "Need a url" unless url
    @repo.add url, name

  when "ls", "list" then
    templates = @repo.templates ARGV.shift
    width     = templates.keys.map(&:length).max || 0
    max       = 80 - width - 5

    templates.keys.sort.each do |name|
      template = templates[name]
      desc     = template.description

      if desc.length > max
        desc = desc[0, max - 3] + "..."
      end

      printf "%-#{width}s   # #{desc}\n", name
    end

  when "mv", "rename" then
    old, new = ARGV

    help! "Need names!" unless old && new
    @repo.rename old, new

  when "rm", "remove" then
    help! "Need a name" unless name = ARGV.shift
    @repo.remove name

  when "update" then
    @repo.update ARGV.shift

  else
    help! unless command
    template = @repo.templates[command]

    help! "Unknown command or template: #{command}" unless template
    help! "Need a destination directory" unless destdir = ARGV.shift

    my  = Basis::My.new File.basename(destdir)
    ctx = Basis::Context.new my, @overrides

    template.render destdir, ctx
    Basis::Hooks.fire :rendered, destdir
  end
rescue Basis::Oops => e
  help! e.message
end
